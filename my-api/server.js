/**
 * Main API Server for Shareholder Search
 * 
 * ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
 * - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
 * - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° Account ID
 * - ‡∏î‡∏π‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏ç‡πà
 * 
 * @author Your Company
 * @version 1.0.0
 */

require('dotenv').config();           // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
const express = require('express');
const cors = require('cors');

const { connectDatabase, closeDatabase, checkHealth } = require('./config/database');
const searchRoutes = require('./routes/search');

const app = express();

const PORT = process.env.PORT || 3000;
const API_NAME = 'ShareholderSummary Search API';
const VERSION = '1.0.0';

// Middleware ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á JSON/form data
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware log ‡∏Ñ‡∏≥‡∏Ç‡∏≠
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl} - IP: ${req.ip}`);
    next();
});

// Root endpoint: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
app.get('/', (req, res) => {
    res.json({
        name: API_NAME,
        version: VERSION,
        description: 'API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å SQL Server',
        status: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
        timestamp: new Date().toISOString(),
        endpoints: {
            all: '/api/all',
            search: '/api/search?q=keyword',
            byAccount: '/api/by-account/:accountId',
            topHolders: '/api/top-holders',
            count: '/api/count',
            health: '/health'
        }
    });
});

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ
app.use('/api', searchRoutes);

// Health check endpoint
app.get('/health', async (req, res) => {
    try {
        const dbHealth = await checkHealth();

        const healthInfo = {
            api: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            database: dbHealth.connected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
            timestamp: new Date().toISOString(),
            uptimeSeconds: Math.floor(process.uptime()),
            memoryMB: {
                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)
            }
        };

        if (dbHealth.connected) {
            healthInfo.databaseResponseTimeMs = dbHealth.responseTime;
            res.status(200).json(healthInfo);
        } else {
            healthInfo.error = dbHealth.error;
            res.status(503).json(healthInfo);
        }
    } catch (error) {
        res.status(503).json({
            api: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            database: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${req.method} ${req.originalUrl}`,
        timestamp: new Date().toISOString()
    });
});

// Error handler ‡∏Å‡∏•‡∏≤‡∏á
app.use((err, req, res, next) => {
    console.error('Internal Server Error:', err);
    res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        error: err.message,
        timestamp: new Date().toISOString()
    });
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function startServer() {
    try {
        console.log(`üöÄ Starting ${API_NAME} v${VERSION}...`);
        await connectDatabase();
        const server = app.listen(PORT, () => {
            console.log(`‚úÖ Server running at http://localhost:${PORT}`);
        });
        setupGracefulShutdown(server);
        return server;
    } catch (error) {
        console.error('Failed to start server:', error);
        process.exit(1);
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û
function setupGracefulShutdown(server) {
    ['SIGINT', 'SIGTERM'].forEach(signal => {
        process.on(signal, async () => {
            console.log(`\nReceived ${signal}, shutting down...`);
            try {
                server.close(() => console.log('HTTP server closed'));
                await closeDatabase();
                console.log('Database connection closed');
                process.exit(0);
            } catch (err) {
                console.error('Error during shutdown:', err);
                process.exit(1);
            }
        });
    });

    process.on('uncaughtException', err => {
        console.error('Uncaught Exception:', err);
        process.exit(1);
    });

    process.on('unhandledRejection', reason => {
        console.error('Unhandled Rejection:', reason);
        process.exit(1);
    });
}

// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
if (require.main === module) {
    startServer();
}

module.exports = { app, startServer };
