/**
 * Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API endpoints ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

const express = require('express');
const { getPool, sql } = require('../config/database.js');

const router = express.Router();

const TABLE_NAME = '[INVCON_DEV23N].[dbo].[ShareholderSummary]';
const MAX_LIMIT = 1000; 
const DEFAULT_LIMIT = 50; 

const sanitizeInput = (input) => {
    if (!input) return '';
    return input
        .replace(/[<>'"]/g, '')
        .replace(/--/g, '')
        .replace(/;/g, '')
        .trim()
        .substring(0, 100);
};

/**
 * GET /api/all - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ASC
 */
router.get('/all', async (req, res) => {
    const startTime = Date.now();

    try {
        const limit = Math.min(parseInt(req.query.limit) || DEFAULT_LIMIT, MAX_LIMIT);
        const offset = Math.max(parseInt(req.query.offset) || 0, 0);

        console.log(`‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${limit}, ‡∏Ç‡πâ‡∏≤‡∏°: ${offset}, ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°: _id ASC`);

        const pool = getPool();

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        const countQuery = `SELECT COUNT(*) as total FROM ${TABLE_NAME}`;
        const countResult = await pool.request().query(countQuery);
        const totalRecords = countResult.recordset[0].total;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ASC ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
        const dataRequest = pool.request();
        dataRequest.input('limit', sql.Int, limit);
        dataRequest.input('offset', sql.Int, offset);

        const dataQuery = `
            SELECT *
            FROM ${TABLE_NAME}
            ORDER BY _id ASC
            OFFSET @offset ROWS
            FETCH NEXT @limit ROWS ONLY
        `;

        const dataResult = await dataRequest.query(dataQuery);
        const executionTime = Date.now() - startTime;

        console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${dataResult.recordset.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${executionTime}ms`);

        res.json({
            success: true,
            message: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalRecords} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
            data: dataResult.recordset,
            pagination: {
                current_count: dataResult.recordset.length,
                total_records: totalRecords,
                limit: limit,
                offset: offset,
                has_more: (offset + limit) < totalRecords,
                next_offset: (offset + limit) < totalRecords ? offset + limit : null
            },
            meta: {
                execution_time_ms: executionTime,
                sort: { field: '_id', order: 'ASC' },
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

/**
 * GET /api/search - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ASC
 */
router.get('/search', async (req, res) => {
    const startTime = Date.now();

    try {
        const searchTerm = sanitizeInput(req.query.q);
        if (!searchTerm) {
            return res.status(400).json({
                success: false,
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (?q=‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)',
                example: '/api/search?q=NameDemo'
            });
        }

        const limit = Math.min(parseInt(req.query.limit) || DEFAULT_LIMIT, MAX_LIMIT);
        const offset = Math.max(parseInt(req.query.offset) || 0, 0);

        console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "${searchTerm}" - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${limit}, ‡∏Ç‡πâ‡∏≤‡∏°: ${offset}`);

        const pool = getPool();

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const countQuery = `
            SELECT COUNT(*) as total 
            FROM ${TABLE_NAME}
            WHERE [n_first] LIKE @keyword 
               OR [n_last] LIKE @keyword 
               OR [Account_ID] LIKE @keyword
               OR [Phone] LIKE @keyword
               OR [OriginalPhone] LIKE @keyword
               OR [i_ref] LIKE @keyword
        `;

        const countRequest = pool.request();
        countRequest.input('keyword', sql.NVarChar, `%${searchTerm}%`);
        const countResult = await countRequest.query(countQuery);
        const totalMatches = countResult.recordset[0].total;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° _id ASC ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
        const searchRequest = pool.request();
        searchRequest.input('keyword', sql.NVarChar, `%${searchTerm}%`);
        searchRequest.input('limit', sql.Int, limit);
        searchRequest.input('offset', sql.Int, offset);

        const searchQuery = `
            SELECT *
            FROM ${TABLE_NAME}
            WHERE [n_first] LIKE @keyword 
               OR [n_last] LIKE @keyword 
               OR [Account_ID] LIKE @keyword
               OR [Phone] LIKE @keyword
               OR [OriginalPhone] LIKE @keyword
               OR [i_ref] LIKE @keyword
            ORDER BY _id ASC
            OFFSET @offset ROWS
            FETCH NEXT @limit ROWS ONLY
        `;

        const searchResult = await searchRequest.query(searchQuery);
        const executionTime = Date.now() - startTime;

        console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ${searchResult.recordset.length}/${totalMatches} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${executionTime}ms`);

        res.json({
            success: true,
            message: `‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${searchTerm}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${totalMatches} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
            search_term: searchTerm,
            data: searchResult.recordset,
            pagination: {
                current_count: searchResult.recordset.length,
                total_matches: totalMatches,
                limit: limit,
                offset: offset,
                has_more: (offset + limit) < totalMatches,
                next_offset: (offset + limit) < totalMatches ? offset + limit : null
            },
            meta: {
                execution_time_ms: executionTime,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', error.message);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
            search_term: req.query.q,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô /by-account, /top-holders, /count)

module.exports = router;
