/**
 * SQL Server Database Connection Configuration
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ShareholderSummary
 * 
 * @author Your Company
 * @version 1.0.0
 */

require('dotenv').config();
const sql = require('mssql');

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL Server
const dbConfig = {
    user: process.env.DB_USER || 'invconnect',
    password: process.env.DB_PASSWORD || '@inv2021!',
    server: process.env.DB_SERVER || 'pro.inventech.co.th',
    database: process.env.DB_NAME || 'INVCON_DEV23N',
    port: parseInt(process.env.DB_PORT, 10) || 1433,

    options: {
        encrypt: false,               // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local SQL Server
        trustServerCertificate: true, // ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        enableArithAbort: true,       // ‡∏õ‡∏¥‡∏î Arithmetic Abort
        connectionTimeout: 30000,     // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        requestTimeout: 30000         // ‡πÄ‡∏ß‡∏•‡∏≤ query ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    },

    pool: {
        max: 10,                     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool
        min: 0,                      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool
        idleTimeoutMillis: 30000     // timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö connection ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    }
};

let pool = null;

/**
 * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Connection Pool
 * @returns {Promise<sql.ConnectionPool>} Connection Pool
 */
const connectDatabase = async () => {
    try {
        console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server...');
        console.log(`üìç Server: ${dbConfig.server}:${dbConfig.port}`);
        console.log(`üóÑÔ∏è  Database: ${dbConfig.database}`);

        pool = new sql.ConnectionPool(dbConfig);
        await pool.connect();

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ query ‡πÄ‡∏ß‡∏•‡∏≤
        const result = await pool.request().query('SELECT GETDATE() AS currentTime');
        console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        console.log('üïí ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', result.recordset[0].currentTime);

        return pool;

    } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database:', error.message);
        console.error('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ .env, ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
        throw error;
    }
};

/**
 * ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
const closeDatabase = async () => {
    try {
        if (pool) {
            console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database...');
            await pool.close();
            pool = null;
            console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÅ‡∏•‡πâ‡∏ß');
        }
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error.message);
        throw error;
    }
};

/**
 * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Connection Pool ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @throws Error ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
 * @returns {sql.ConnectionPool} Connection Pool
 */
const getPool = () => {
    if (!pool) {
        throw new Error('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å connectDatabase() ‡∏Å‡πà‡∏≠‡∏ô');
    }
    return pool;
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
 */
const checkHealth = async () => {
    try {
        if (!pool || !pool.connected) {
            return {
                status: 'disconnected',
                connected: false,
                error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
            };
        }

        const start = Date.now();
        await pool.request().query('SELECT 1 AS test');
        const responseTime = Date.now() - start;

        return {
            status: 'connected',
            connected: true,
            responseTime,
            server: dbConfig.server,
            database: dbConfig.database
        };

    } catch (error) {
        return {
            status: 'error',
            connected: false,
            error: error.message
        };
    }
};

module.exports = {
    connectDatabase,
    closeDatabase,
    getPool,
    checkHealth,
    sql // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡∏ß sql ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
};
